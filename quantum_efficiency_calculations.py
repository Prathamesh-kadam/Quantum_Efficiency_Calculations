# -*- coding: utf-8 -*-
"""Quantum_Efficiency_Calculations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lhBTSxbJqJfhAGZUnx1RMqIVAmDGVYZ4
"""

import pandas as pd
import numpy as np

file_path = "/content/sample_data/astmg173 1111111.xlsx"
data = pd.read_excel(file_path, header=None)
P_hw = data.iloc[:, 1].values

Eg = float(input("Enter the bandgap energy (Eg): "))
hw_max = data.iloc[:, 0].max()
numerator = np.mean(P_hw) * (hw_max - Eg)
denominator = np.mean(P_hw) * (hw_max - 0)

eta_abs = numerator / denominator

print(f"Absorption efficiency (η_abs): {eta_abs:.6f}")

import pandas as pd
import numpy as np

file_path = "/content/sample_data/astmg173 1111111.xlsx"
data = pd.read_excel(file_path, header=None)
hw = data.iloc[:, 0].values
P_hw = data.iloc[:, 1].values

Eg = float(input("Enter the bandgap energy (Eg): "))
E = float(input("Enter the energy threshold (E): "))
P_div_hw = P_hw / hw

numerator_mask = hw >= E
denominator_mask = hw >= Eg

numerator = np.sum(P_div_hw[numerator_mask] * np.diff(hw[numerator_mask], append=hw[numerator_mask][-1]))
denominator = np.sum(P_div_hw[denominator_mask] * np.diff(hw[denominator_mask], append=hw[denominator_mask][-1]))

eta_cu = numerator / denominator

print(f"Quantum efficiency of carrier utilization (η_cu): {eta_cu:.6f}")

eta_STH = eta_abs * eta_cu
#eta_T_Q = eta_abs * eta_cu_Q

# Print results
print(f"η_STH: {eta_STH}")
#print(f"η_T^Q: {eta_T_Q}")